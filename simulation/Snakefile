configfile: 'config.yaml'

nbBatches = int(int(config['nbQs']) / int(config['bSize']))

rule all:
    input:
    	"results/parameters.txt",
    	"results/dist.pdf"

rule genRandQueries:
	params:
		qLen = config['qLen'],
		batchSize = config['bSize']
	output:
		temp("queries/Random_{bID}.q")
	shell:
		"mkdir -p queries; NB_BATCHES=%s; scripts/GenRandDNA_Seq.py {params.qLen} {params.batchSize} > {output}"

rule queryGraph:
	input:
		pBin = config['PLASTbin'],
		graph = config['gPathPref'],
		query = "queries/Random_{bID}.q"
	params:
		k = config['k'],
		g = config['miniLen'],
		w = config['seedLen']
	output:
		scores = temp("results/maxScores_{bID}.txt"),
		log = temp("results/maxScores_{bID}.log")
	shell:
		"mkdir -p results; {input.pBin} Search -i $(echo {input.graph} | sed 's/.gfa//g') -q {input.query} -k {params.k} -g {params.g} -w {params.w} -e 100 -u > {output.scores} 2> {output.log}"

rule aggregateScores:
	input:
		scores = expand("results/maxScores_{bID}.txt", bID=range(1, nbBatches + 1))
	output:
		temp("results/aggMaxScores.txt")
	shell:
		"scripts/aggScores.py {input.scores} > {output}"

rule calcParams:
	input:
		scores = "results/aggMaxScores.txt"
	output:
		statParam = "results/parameters.txt",
		figure = "results/dist.pdf"
	shell:
		"scripts/estParams.py {input.scores} > {output.statParam}"
